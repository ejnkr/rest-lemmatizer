apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: rest-lemmatizer
    app.kubernetes.io/component: rest-tokenizer
    app.kubernetes.io/instance: {{ .Release.Name }}-tokenizer
  name: {{ .Release.Name }}-tokenizer
spec:
  replicas: {{ .Values.tokenizer.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}-tokenizer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rest-lemmatizer
        app.kubernetes.io/component: rest-tokenizer
        app.kubernetes.io/instance: {{ .Release.Name }}-tokenizer
    spec:
      containers:
      - name: http
        image: {{ .Values.tokenizer.image }}
        imagePullPolicy: "IfNotPresent"
        command: ["rest-tokenizer"]
        ports:
        - containerPort: 8080
          name: http
        env:
          - name: RUST_LOG
            value: {{ .Values.tokenizer.logLevel }}
          - name: USERDIC_SERVER_URL
            value: {{ printf "http://%s-userdic:8080/nouns" .Release.Name }}
          - name: PORT
            value: "8080"
        livenessProbe:
          httpGet:
            path: /tokenize?q=hello
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 20
        resources:
{{ toYaml .Values.tokenizer.resources | indent 10 }}
      {{- if .Values.tokenizer.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.tokenizer.nodeSelector | indent 8 }}
      {{- end }}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: rest-lemmatizer
    app.kubernetes.io/component: rest-tokenizer
    app.kubernetes.io/instance: {{ .Release.Name }}-tokenizer
  name: {{ .Release.Name }}-tokenizer
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app.kubernetes.io/instance: {{ .Release.Name }}-tokenizer
  type: ClusterIP
